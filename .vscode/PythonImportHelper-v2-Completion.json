[
    {
        "label": "StateGraph",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "START",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "END",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "GroqLLM",
        "importPath": "src.llms.groqllm",
        "description": "src.llms.groqllm",
        "isExtraImport": true,
        "detail": "src.llms.groqllm",
        "documentation": {}
    },
    {
        "label": "BlogState",
        "importPath": "src.states.blogstate",
        "description": "src.states.blogstate",
        "isExtraImport": true,
        "detail": "src.states.blogstate",
        "documentation": {}
    },
    {
        "label": "BlogState",
        "importPath": "src.states.blogstate",
        "description": "src.states.blogstate",
        "isExtraImport": true,
        "detail": "src.states.blogstate",
        "documentation": {}
    },
    {
        "label": "BlogNode",
        "importPath": "src.nodes.blog_node",
        "description": "src.nodes.blog_node",
        "isExtraImport": true,
        "detail": "src.nodes.blog_node",
        "documentation": {}
    },
    {
        "label": "ChatGroq",
        "importPath": "langchain_groq",
        "description": "langchain_groq",
        "isExtraImport": true,
        "detail": "langchain_groq",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "GraphBuilder",
        "kind": 6,
        "importPath": "src.graphs.graph_builder",
        "description": "src.graphs.graph_builder",
        "peekOfCode": "class GraphBuilder:\n    def  __init__(self,llm):\n        self.llm=llm\n        self.graph=StateGraph(BlogState)\n    def build_topic_graph(self):\n        self.blog_node=BlogNode(self.llm)\n        self.graph.add_node(\"title\",self.blog_node.title)\n        self.graph.add_node(\"content\",)\n        self.graph.add_edge(START,\"title\")\n        self.graph.add_edge(\"title\",\"content\")",
        "detail": "src.graphs.graph_builder",
        "documentation": {}
    },
    {
        "label": "GroqLLM",
        "kind": 6,
        "importPath": "src.llms.groqllm",
        "description": "src.llms.groqllm",
        "peekOfCode": "class GroqLLM:\n    def __init__(self):\n        load_dotenv()\n    def get_llm(self):\n        try:\n            os.environ[\"GROQ_API_KEY\"] = self.groq_api_key= os.getenv(\"GROQ_API_KEY\")\n            llm = ChatGroq(model=\"openai/gpt-oss-20b\")\n            return llm\n        except Exception as e:\n            print(f\"Error initializing Groq LLM: {e}\")",
        "detail": "src.llms.groqllm",
        "documentation": {}
    },
    {
        "label": "BlogNode",
        "kind": 6,
        "importPath": "src.nodes.blog_node",
        "description": "src.nodes.blog_node",
        "peekOfCode": "class BlogNode:\n    def __init__(self,llm):\n        self.llm=llm\n    def title(self,state:BlogState):\n        if \"topic\" in state and state[\"topic\"]:\n            prompt=\"\"\"You are an expert blog content writer.Use Markdown formatting to create a catchy and engaging blog title based on the given topic.\n            Topic: {topic}.\n            The  title should be concise, attention-grabbing, and relevant to the topic.\n            Ensure the title is unique and stands out to attract readers.\n            Return only the title without any additional text or punctuation.",
        "detail": "src.nodes.blog_node",
        "documentation": {}
    },
    {
        "label": "Blog",
        "kind": 6,
        "importPath": "src.states.blogstate",
        "description": "src.states.blogstate",
        "peekOfCode": "class Blog(BaseModel):\n    title:str=Field(description=\"Title of blog post\")\n    content:str=Field(description=\"The main content of blog post\")\nclass BlogState(TypedDict):\n    topic: str\n    blog: Blog\n    current_language:str",
        "detail": "src.states.blogstate",
        "documentation": {}
    },
    {
        "label": "BlogState",
        "kind": 6,
        "importPath": "src.states.blogstate",
        "description": "src.states.blogstate",
        "peekOfCode": "class BlogState(TypedDict):\n    topic: str\n    blog: Blog\n    current_language:str",
        "detail": "src.states.blogstate",
        "documentation": {}
    }
]